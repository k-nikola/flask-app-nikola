name: CI/CD

on:
  push:
    branches: [main]
    paths:
      - webapp/**
      - .github/**

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
    steps:
      - uses: actions/checkout@v2
      - name: Setup runner db
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          sudo mysql -uroot -h127.0.0.1 -p$MYSQL_ROOT_PASSWORD -e 'CREATE DATABASE IF NOT EXISTS flask_nikola;'
      - name: Setup selenium
        run: |
          sudo pip3 install selenium==4.0.0
      - name: Setup chrome
        run: |
          sudo apt-get install google-chrome-stable 
          sudo apt-get install -y unzip   
          wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip 
          sudo mv chromedriver /usr/bin/chromedriver
      - name: Setup gunicorn
        run: |
          sudo apt-get install gunicorn
      - name: Install requirements
        run: |
          sudo pip3 install -r requirements.txt
      - name: Setup and start the app
        env:
          db_uri: ${{ secrets.DB_URI }}
          secret_key: ${{ secrets.SECRET_KEY }}
        run: |
          export db_uri secret_key
          nohup gunicorn -b 0.0.0.0:5000 webapp:app > log.txt 2>&1 &
          sudo ls -lha
          sudo tail log.txt
      - name: Run the tests
        env:
          driver_location: ${{ secrets.DRIVER_LOCATION }}
          app_url: ${{ secrets.APP_URL }}
        run: |
          export app_url driver_location
          python3 test.py
          echo "***************************************"
          echo "Starting tests:"
          echo "***************************************"
  build:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

      - name: Docker build image with python app

        run: |
          docker build . -t t0b9/flask-app-nikola:latest

      - name: Docker push created image

        run: |
          docker push t0b9/flask-app-nikola:latest
